type GeoPoint {
  lat: Float!
  long: Float!
}

type Dive {
	sensorId: String!
	sensor: Sensor!
	startTime: Int!
    endTime: Int!
	startPoint: GeoPoint!
	endPoint: GeoPoint!
    sensorData: [SensorData!]!
}

enum SensorStatus {
    ACTIVE
    INACTIVE
    DISABLED
    UNKNOWN
}

type Sensor {
  id: ID!
  name: String!
  type: String!
  model: String!
  status: SensorStatus!
}

type SensorData {
  depth: Float!
  rawPressure: Int!
  rawTemp: Int!
  temp: Float!
  time: Int!
}

type Query {
  "This will fetch all dives"
  dives: [Dive!]!

  "This will fetch all sensors"
  sensors: [Sensor!]!
}

input InputSensor {
  sensorId: String!
  name: String!
  type: String!
  model: String!
}

type Mutation {
  "This will register a new sensor"
  sensorCreate(sensor: InputSensor!): Sensor!
}
